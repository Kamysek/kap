# This file was generated based on "schema.json". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

"An object with an ID"
interface Node {
  "The ID of the object."
  id: ID!
}

type AppointmentType implements Node {
  appointmentEnd: DateTime
  appointmentStart: DateTime
  commentDoctor: String
  commentPatient: String
  createdAt: DateTime
  dayReminder: Boolean!
  "The ID of the object."
  id: ID!
  noshow: Boolean!
  patient: UserType
  taken: Boolean!
  title: String
  weekReminder: Boolean!
}

type AppointmentTypeConnection {
  "Contains the nodes in this connection."
  edges: [AppointmentTypeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `AppointmentType` and its cursor."
type AppointmentTypeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: AppointmentType
}

type BookSlotsPayload {
  appointmentList: [ID]
  clientMutationId: String
}

type CallType implements Node {
  comment: String
  date: DateTime
  "The ID of the object."
  id: ID!
  user: UserType
}

type CallTypeConnection {
  "Contains the nodes in this connection."
  edges: [CallTypeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `CallType` and its cursor."
type CallTypeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: CallType
}

type CheckupType implements Node {
  daysUntil: Int
  "The ID of the object."
  id: ID!
  name: String
  study: StudyType
}

type CheckupTypeConnection {
  "Contains the nodes in this connection."
  edges: [CheckupTypeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `CheckupType` and its cursor."
type CheckupTypeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: CheckupType
}

type CreateAppointmentPayload {
  appointment: AppointmentType
  clientMutationId: String
}

type CreateAppointmentsPayload {
  appointments: [AppointmentType]
  clientMutationId: String
}

type CreateCheckupPayload {
  checkup: CheckupType
  clientMutationId: String
}

type CreateStudyPayload {
  clientMutationId: String
  study: StudyType
}

type CreateUserPayload {
  clientMutationId: String
  user: UserType
}

type DeleteAppointmentPayload {
  appointment: AppointmentType
  clientMutationId: String
  ok: Boolean
}

type DeleteCheckupPayload {
  clientMutationId: String
  ok: Boolean
}

type DeleteStudyPayload {
  clientMutationId: String
  ok: Boolean
}

type DeleteUserPayload {
  clientMutationId: String
  ok: Boolean
  user: UserType
}

type Mutation {
  bookSlots(input: BookSlotsInput!): BookSlotsPayload
  createAppointment(input: CreateAppointmentInput!): CreateAppointmentPayload
  createAppointments(input: CreateAppointmentsInput!): CreateAppointmentsPayload
  createCheckup(input: CreateCheckupInput!): CreateCheckupPayload
  createStudy(input: CreateStudyInput!): CreateStudyPayload
  createUser(input: CreateUserInput!): CreateUserPayload
  deleteAppointment(input: DeleteAppointmentInput!): DeleteAppointmentPayload
  deleteCheckup(input: DeleteCheckupInput!): DeleteCheckupPayload
  deleteStudy(input: DeleteStudyInput!): DeleteStudyPayload
  deleteUser(input: DeleteUserInput!): DeleteUserPayload
  refreshToken(token: String!): Refresh
  "Obtain JSON Web Token mutation"
  tokenAuth(password: String!, username: String!): ObtainJSONWebToken
  updateAppointment(input: UpdateAppointmentInput!): UpdateAppointmentPayload
  updateCheckup(input: UpdateCheckupInput!): UpdateCheckupPayload
  updateStudy(input: UpdateStudyInput!): UpdateStudyPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  userCalled(input: UserCalledInput!): UserCalledPayload
  verifyToken(token: String!): Verify
}

"Obtain JSON Web Token mutation"
type ObtainJSONWebToken {
  token: String
}

"The Relay compliant `PageInfo` type, containing data necessary to paginate this connection."
type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

type Query {
  "The ID of the object"
  getAppointment(id: ID!): AppointmentType
  getAppointments(
    after: DateTime
    appointmentEnd: DateTime
    appointmentStart: DateTime
    before: DateTime
    first: Int
    hasPatient: Boolean
    last: Int
    taken: Boolean
    title: String
  ): AppointmentTypeConnection
  "The ID of the object"
  getCheckup(id: ID!): CheckupType
  getCheckupDate: DateTime
  getMe: UserType
  getOverduePatients(
    after: String
    before: String
    checkupOverdue: DateTime
    dateJoined: DateTime
    email: String
    emailNotification: Boolean
    first: Int
    groups: [ID]
    isActive: Boolean
    isStaff: Boolean
    last: Int
    overdueNotified: DateTime
    passwordChanged: Boolean
    studyParticipation: ID
    timeslotsNeeded: Int
    username: String
  ): UserTypeConnection
  getSlotLists(
    minusdays: Int = 7
    plusdays: Int = 7
    userId: ID
  ): [[AppointmentType]]
  getStudies(
    after: String
    before: String
    first: Int
    id: ID
    last: Int
    name: String
  ): StudyTypeConnection
  "The ID of the object"
  getUser(id: ID!): UserType
  getUserGroup: String
  getUsers(
    after: String
    before: String
    checkupOverdue: DateTime
    dateJoined: DateTime
    email: String
    emailNotification: Boolean
    first: Int
    groups: [ID]
    isActive: Boolean
    isStaff: Boolean
    last: Int
    overdueNotified: DateTime
    passwordChanged: Boolean
    studyParticipation: ID
    timeslotsNeeded: Int
    username: String
  ): UserTypeConnection
}

type Refresh {
  payload: GenericScalar
  token: String
}

type StudyType implements Node {
  checkupSet(
    after: String
    before: String
    first: Int
    last: Int
  ): CheckupTypeConnection!
  customuserSet(
    after: String
    before: String
    first: Int
    last: Int
  ): UserTypeConnection!
  "The ID of the object."
  id: ID!
  name: String
}

type StudyTypeConnection {
  "Contains the nodes in this connection."
  edges: [StudyTypeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `StudyType` and its cursor."
type StudyTypeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: StudyType
}

type UpdateAppointmentPayload {
  appointment: AppointmentType
  clientMutationId: String
}

type UpdateCheckupPayload {
  checkup: CheckupType
  clientMutationId: String
}

type UpdateStudyPayload {
  clientMutationId: String
  study: StudyType
}

type UpdateUserPayload {
  clientMutationId: String
  user: UserType
}

type UserCalledPayload {
  clientMutationId: String
  user: UserType
}

type UserType implements Node {
  appointmentSet(
    after: String
    before: String
    first: Int
    last: Int
  ): AppointmentTypeConnection!
  callSet(
    after: String
    before: String
    first: Int
    last: Int
  ): CallTypeConnection!
  checkupOverdue: DateTime
  dateJoined: DateTime
  email: String
  emailNotification: Boolean!
  group: String
  "The ID of the object."
  id: ID!
  isActive: Boolean!
  isStaff: Boolean!
  nextCheckup: Date
  overdueNotified: DateTime
  passwordChanged: Boolean!
  studyParticipation: StudyType
  timeslotsNeeded: Int
  username: String
}

type UserTypeConnection {
  "Contains the nodes in this connection."
  edges: [UserTypeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `UserType` and its cursor."
type UserTypeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: UserType
}

type Verify {
  payload: GenericScalar
}

input AppointmentInput {
  appointmentEnd: DateTime!
  appointmentStart: DateTime!
  commentDoctor: String
  patient: ID
  title: String!
}

input BookSlotsInput {
  appointmentList: [ID]
  clientMutationId: String
  commentPatient: String
  userId: ID
}

input CreateAppointmentInput {
  appointmentEnd: DateTime!
  appointmentStart: DateTime!
  clientMutationId: String
  commentDoctor: String
  title: String!
}

input CreateAppointmentsInput {
  appointments: [AppointmentInput]
  clientMutationId: String
}

input CreateCheckupInput {
  clientMutationId: String
  daysUntil: Int!
  name: String!
  studyId: ID!
}

input CreateStudyInput {
  clientMutationId: String
  name: String!
}

input CreateUserInput {
  clientMutationId: String
  dateJoined: DateTime
  email: String!
  emailNotification: Boolean
  group: String!
  password: String!
  timeslotsNeeded: Int
  username: String!
}

input DeleteAppointmentInput {
  clientMutationId: String
  id: ID!
  removePatient: Boolean
}

input DeleteCheckupInput {
  clientMutationId: String
  id: ID!
}

input DeleteStudyInput {
  clientMutationId: String
  id: ID!
}

input DeleteUserInput {
  clientMutationId: String
  id: ID!
}

input UpdateAppointmentInput {
  appointmentEnd: DateTime
  appointmentStart: DateTime
  clientMutationId: String
  commentDoctor: String
  commentPatient: String
  id: ID!
  noshow: Boolean
  patient: String
  taken: Boolean
  title: String
}

input UpdateCheckupInput {
  clientMutationId: String
  daysUntil: Int
  id: ID!
  name: String
}

input UpdateStudyInput {
  clientMutationId: String
  id: ID!
  name: String!
}

input UpdateUserInput {
  clientMutationId: String
  dateJoined: DateTime
  email: String
  emailNotification: Boolean
  group: String
  id: ID!
  password: String
  studyParticipation: ID
  timeslotsNeeded: Int
  username: String
}

input UserCalledInput {
  clientMutationId: String
  comment: String
  userId: ID!
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar
