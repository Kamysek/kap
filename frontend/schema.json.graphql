# This file was generated based on "schema.json". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

type AppointmentType {
  appointmentEnd: DateTime!
  appointmentStart: DateTime!
  calendar: CalendarType
  commentDoctor: String!
  commentPatient: String!
  createdAt: DateTime
  id: ID!
  patient: UserType
  taken: Boolean!
  title: String
}

type BoardType {
  creator: UserType
  description: String!
  name: String!
}

type CalendarType {
  doctor: UserType
  id: ID!
  name: String!
}

type ChoiceAnswerType {
  choiceAnswer: ChoiceType
  createdBy: UserType
  createdOn: DateTime!
  question: QuestionType!
  updatedOn: DateTime!
}

type ChoiceType {
  choiceText: String!
  question: QuestionType!
}

type CreateAppointment {
  appointment: AppointmentType
}

type CreateBoard {
  board: BoardType
}

type CreateCalendar {
  calendar: CalendarType
}

type CreateChoice {
  choice: ChoiceType
}

type CreateChoiceAnswer {
  choiceAnswer: ChoiceAnswerType
}

type CreateGroup {
  group: GroupType
}

type CreateNumberAnswer {
  numberAnswer: NumberAnswerType
}

type CreatePost {
  post: PostType
}

type CreateQuestion {
  question: QuestionType
}

type CreateSurvey {
  survey: SurveyType
}

type CreateTextAnswer {
  textAnswer: TextAnswerType
}

type CreateTopic {
  topic: TopicType
}

type CreateUser {
  user: UserType
}

type DeleteAppointment {
  appointment: AppointmentType
  ok: Boolean
}

type DeleteBoard {
  board: BoardType
  ok: Boolean
}

type DeleteCalendar {
  calendar: CalendarType
  ok: Boolean
}

type DeleteChoice {
  choice: ChoiceType
  ok: Boolean
}

type DeleteChoiceAnswer {
  choiceAnswer: ChoiceAnswerType
  ok: Boolean
}

type DeleteNumberAnswer {
  numberAnswer: NumberAnswerType
  ok: Boolean
}

type DeletePost {
  ok: Boolean
  post: TopicType
}

type DeleteQuestion {
  ok: Boolean
  question: QuestionType
}

type DeleteSurvey {
  ok: Boolean
  survey: SurveyType
}

type DeleteTakenAppointment {
  appointment: AppointmentType
  ok: Boolean
}

type DeleteTextAnswer {
  ok: Boolean
  textAnswer: TextAnswerType
}

type DeleteTopic {
  ok: Boolean
  topic: TopicType
}

type DeleteUser {
  ok: Boolean
  user: UserType
}

type GroupType {
  id: ID!
  name: String!
  "The groups this user belongs to. A user will get all permissions granted to each of their groups."
  userSet: [UserType!]!
}

type Mutation {
  createAppointment(input: AppointmentInput!): CreateAppointment
  createBoard(input: BoardInput!): CreateBoard
  createCalendar(input: CalendarInput!): CreateCalendar
  createChoice(input: ChoiceInput!): CreateChoice
  createChoiceAnswer(input: ChoiceAnswerInput!): CreateChoiceAnswer
  createGroup(input: GroupInput!): CreateGroup
  createNumberAnswer(input: NumberAnswerInput!): CreateNumberAnswer
  createPost(input: PostInput!): CreatePost
  createQuestion(input: QuestionInput!): CreateQuestion
  createSurvey(input: SurveyInput!): CreateSurvey
  createTextAnswer(input: TextAnswerInput!): CreateTextAnswer
  createTopic(input: TopicInput!): CreateTopic
  createUser(input: UserInput!): CreateUser
  deleteAppointment(appointmentId: Int!): DeleteAppointment
  deleteBoard(boardId: Int!): DeleteBoard
  deleteCalendar(calendarId: Int!): DeleteCalendar
  deleteChoice(choiceId: Int!): DeleteChoice
  deleteChoiceAnswer(choiceAnswerId: Int!): DeleteChoiceAnswer
  deleteNumberAnswer(numberAnswerId: Int!): DeleteNumberAnswer
  deletePost(postId: Int!): DeletePost
  deleteQuestion(questionId: Int!): DeleteQuestion
  deleteSurvey(surveyId: Int!): DeleteSurvey
  deleteTakenAppointment(appointmentId: Int!): DeleteTakenAppointment
  deleteTextAnswer(textAnswerId: Int!): DeleteTextAnswer
  deleteTopic(topicId: Int!): DeleteTopic
  deleteUser(userId: Int!): DeleteUser
  refreshToken(token: String!): Refresh
  takeAppointment(appointmentId: Int!, commentPatient: String): TakeAppointment
  "Obtain JSON Web Token mutation"
  tokenAuth(password: String!, username: String!): ObtainJSONWebToken
  updateAppointment(
    appointmentId: Int!
    input: AppointmentInput!
  ): UpdateAppointment
  updateBoard(boardId: Int!, input: BoardInput!): UpdateBoard
  updateCalendar(calendarId: Int!, input: CalendarInput!): UpdateCalendar
  updateChoice(choiceId: Int!, input: ChoiceInput!): UpdateChoice
  updateChoiceAnswer(
    choiceAnswerId: Int!
    input: ChoiceAnswerInput!
  ): UpdateChoiceAnswer
  updateGroup(groupStr: String, userId: Int): UpdateGroup
  updateNumberAnswer(
    input: NumberAnswerInput!
    numberAnswerId: Int!
  ): UpdateNumberAnswer
  updatePost(input: PostInput!, postId: Int!): UpdatePost
  updateQuestion(input: QuestionInput!, questionId: Int!): UpdateQuestion
  updateSurvey(input: SurveyInput!, surveyId: Int!): UpdateSurvey
  updateTakenAppointment(
    appointmentId: Int!
    commentPatient: String
  ): UpdateTakenAppointment
  updateTextAnswer(
    input: TextAnswerInput!
    textAnswerId: Int!
  ): UpdateTextAnswer
  updateTopic(input: TopicInput!, topicId: Int!): UpdateTopic
  updateUser(input: UserInput!, userId: Int!): UpdateUser
  verifyToken(token: String!): Verify
}

type NumberAnswerType {
  createdBy: UserType
  createdOn: DateTime!
  numberAnswer: Int
  question: QuestionType!
  updatedOn: DateTime!
}

"Obtain JSON Web Token mutation"
type ObtainJSONWebToken {
  token: String
}

type PostType {
  createdAt: DateTime!
  createdBy: UserType
  message: String!
  updatedAt: DateTime
  updatedBy: UserType
}

type Query {
  getAllAppointmentsFromCalendar(id: Int): [AppointmentType]
  getAllBoards: [BoardType]
  getAllCalendars: [CalendarType]
  getAllChoiceAnswers(id: Int): [ChoiceAnswerType]
  getAllChoices(id: Int): [ChoiceType]
  getAllGroups: [GroupType]
  getAllNumberAnswers(id: Int): [NumberAnswerType]
  getAllOpenAppointmentsFromCalendar(id: Int): [AppointmentType]
  getAllPosts: [PostType]
  getAllQuestions(id: Int): [QuestionType]
  getAllSurveys: [SurveyType]
  getAllTakenAppointmentsFromCalendar(id: Int): [AppointmentType]
  getAllTextAnswers(id: Int): [TextAnswerType]
  getAllTopics: [TopicType]
  getAllUsers: [UserType]
  getBoard(id: Int): BoardType
  getCalendar(id: Int): CalendarType
  getChoice(id: Int): ChoiceType
  getChoiceAnswer(id: Int): ChoiceAnswerType
  getGroup(name: String): GroupType
  getMe: UserType
  getMyAppointments: [AppointmentType]
  getMyCalendars: [CalendarType]
  getNumberAnswer(id: Int): NumberAnswerType
  getPost(id: Int): PostType
  getQuestion(id: Int): QuestionType
  getSurvey(id: Int): SurveyType
  getTextAnswer(id: Int): TextAnswerType
  getTopic(id: Int): TopicType
  getUser(id: Int): UserType
}

type QuestionType {
  createdBy: UserType
  createdOn: DateTime!
  questionText: String!
  questionType: QuestionQuestionType!
  survey: SurveyType!
  updatedBy: UserType
  updatedOn: DateTime!
}

type Refresh {
  payload: GenericScalar
  token: String
}

type SurveyType {
  createdBy: UserType
  createdOn: DateTime!
  description: String!
  pubDate: DateTime!
  surveyName: String!
  updatedBy: UserType
  updatedOn: DateTime!
}

type TakeAppointment {
  appointment: AppointmentType
}

type TextAnswerType {
  createdBy: UserType
  createdOn: DateTime!
  question: QuestionType!
  textAnswer: String
  updatedOn: DateTime!
}

type TopicType {
  board: BoardType!
  creator: UserType
  lastUpdated: DateTime!
  subject: String!
}

type UpdateAppointment {
  appointment: AppointmentType
}

type UpdateBoard {
  board: BoardType
}

type UpdateCalendar {
  calendar: CalendarType
}

type UpdateChoice {
  choice: ChoiceType
}

type UpdateChoiceAnswer {
  choiceAnswer: ChoiceAnswerType
}

type UpdateGroup {
  groupStr: String
  userId: Int
}

type UpdateNumberAnswer {
  numberAnswer: NumberAnswerType
}

type UpdatePost {
  post: PostType
}

type UpdateQuestion {
  question: QuestionType
}

type UpdateSurvey {
  survey: SurveyType
}

type UpdateTakenAppointment {
  appointment: AppointmentType
}

type UpdateTextAnswer {
  textAnswer: TextAnswerType
}

type UpdateTopic {
  topic: TopicType
}

type UpdateUser {
  user: UserType
}

type UserType {
  dateJoined: DateTime!
  id: ID!
  isActive: Boolean!
  isStaff: Boolean!
  username: String!
}

type Verify {
  payload: GenericScalar
}

"An enumeration."
enum QuestionQuestionType {
  #choice
  CHOICE
  #number
  NUMBER
  #text
  TEXT
}

input AppointmentInput {
  appointmentEnd: DateTime
  appointmentStart: DateTime
  calendar: Int
  commentDoctor: String
  id: ID
  title: String
}

input BoardInput {
  description: String
  id: ID
  name: String
}

input CalendarInput {
  name: String
}

input ChoiceAnswerInput {
  choiceAnswer: Int
  id: ID
  question: Int
}

input ChoiceInput {
  choiceText: String
  id: ID
  question: Int
}

input GroupInput {
  name: String
}

input NumberAnswerInput {
  id: ID
  numberAnswer: String
  question: Int
}

input PostInput {
  id: ID
  message: String
  topic: Int
}

input QuestionInput {
  id: ID
  questionText: String
  questionType: String
  survey: Int
}

input SurveyInput {
  description: String
  id: ID
  pubDate: DateTime
  surveyName: String
}

input TextAnswerInput {
  id: ID
  question: Int
  textAnswer: String
}

input TopicInput {
  board: Int
  id: ID
  lastUpdated: DateTime
  subject: String
}

input UserInput {
  id: ID
  isActive: Boolean
  isStaff: Boolean
  password: String
  username: String
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar
